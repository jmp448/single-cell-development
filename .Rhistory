if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
library(monocle3)
rawdata <- c('/project2/gilad/reem/singlecellCM/round1/fulldata/CD1/CD1col1/output/dge_data/YG-RE-RE1-hpCD1col1_S1_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD1/CD1col2/output/dge_data/YG-RE-RE2-hpCD1col2_S1_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD1/CD1col3/output/dge_data/YG-RE-RE3-hpCD1col3_S1_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD1/CD1col4/output/dge_data/YG-RE-RE4-hpCD1col4_S1_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD1/CD1col5/output/dge_data/YG-RE-RE5-hpCD1col5_S1_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD1/CD1col6/output/dge_data/YG-RE-RE6-hpCD1col6_S1_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD2/CD2col1/output/dge_data/YG-RE-RE3-hpCD2col1_S2_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD2/CD2col2/output/dge_data/YG-RE-RE4-hpCD2col2_S2_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD2/CD2col3/output/dge_data/YG-RE-RE5-hpCD2col3_S2_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD2/CD2col4/output/dge_data/YG-RE-RE6-hpCD2col4_S2_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD2/CD2col5/output/dge_data/YG-RE-RE2-hpCD2col5_S2_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD2/CD2col6/output/dge_data/YG-RE-RE1-hpCD2col6_S2_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD3/CD3col1/output/dge_data/YG-RE-RE4-hpCD3col1_S3_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD3/CD3col2/output/dge_data/YG-RE-RE3-hpCD3col2_S3_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD3/CD3col3/output/dge_data/YG-RE-RE2-CD3col3_Unk1_S4_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD3/CD3col4/output/dge_data/YG-RE-RE1-hpCD3col4_S3_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD3/CD3col5/output/dge_data/YG-RE-RE6-hpCD3col5_S3_gene_counts.tsv.gz',
'/project2/gilad/reem/singlecellCM/round1/fulldata/CD3/CD3col6/output/dge_data/YG-RE-RE5-hpCD3col6_S3_gene_counts.tsv.gz')
min_cells_per_gene = 3  # minimum num cells in which a gene must appear
min_genes_per_cell = 200  # minimum num genes for a cell to be included
cutoff_mito = FALSE  # wanna cut off cells w a certain percent mito? (bool)
mito_threshold = 30  # what is the threshold for mito cutoff?
## Get gene ID info from biomart
geneinfo <- readRDS("./rds_objects/geneinfo.rds")
for (i in 1:3) {
for (j in 1:6) {
# read in every raw data matrix
raw_dat_temp <- read.table(rawdata[6 * (i - 1) + j], header = T, stringsAsFactors = F,
row.names = 1)
# remove the version numbers from those gene IDs
gene_id_temp <- str_replace(rownames(raw_dat_temp), pattern = ".[0-9]+$",
replacement = "")
# and subset to only those genes from the full list of genes
mygeneinfo_temp <- geneinfo[geneinfo$ensembl_gene_id %in% gene_id_temp, ]
# make a temporary raw data matrix with the non-version gene IDs
bm_rawdat_temp <- raw_dat_temp
rownames(bm_rawdat_temp) <- gene_id_temp
rm(gene_id_temp, raw_dat_temp)
# subset temp raw data matrix to only the ones with info on biomart
bm_rawdat_temp <- bm_rawdat_temp[rownames(bm_rawdat_temp) %in% mygeneinfo_temp$ensembl_gene_id,
]
# get all the index numbers for a gene list sorted by number
mygeneinfo_idsort_temp <- order(mygeneinfo_temp$ensembl_gene_id, decreasing = F)
# and sort the genes with those index numbers
mygeneinfo_sort_temp <- mygeneinfo_temp[mygeneinfo_idsort_temp, ]
rm(mygeneinfo_temp, mygeneinfo_idsort_temp)
# get rid of duplicate ensembl IDs
mygeneinfo_s_uni_temp <- mygeneinfo_sort_temp[order(mygeneinfo_sort_temp$ensembl_gene_id)[!duplicated(mygeneinfo_sort_temp$ensembl_gene_id)],
]
rm(mygeneinfo_sort_temp)
# deal with duplicate gene name/symbols (mostly ''s) by identifying the
# duplicates and then creating a new gene name for them that is
# genesymbol.ensemblID
dupl_temp <- unique(mygeneinfo_s_uni_temp$hgnc_symbol[duplicated(mygeneinfo_s_uni_temp$hgnc_symbol)])
for (k in dupl_temp) {
rows_temp <- which(mygeneinfo_s_uni_temp$hgnc_symbol == k)
for (m in 1:length(rows_temp)) {
mygeneinfo_s_uni_temp$hgnc_symbol[rows_temp[m]] <- paste(mygeneinfo_s_uni_temp$hgnc_symbol[rows_temp[m]],
".", mygeneinfo_s_uni_temp$ensembl_gene_id[rows_temp[m]], sep = "")
}
}
# add those new gene names/symbols as rownames in the raw data matrix
rownames(bm_rawdat_temp) <- mygeneinfo_s_uni_temp$hgnc_symbol
rm(mygeneinfo_s_uni_temp)
SObject_temp <- CreateSeuratObject(bm_rawdat_temp, min.cells = min_cells_per_gene,
min.features = min_genes_per_cell, project = paste0("CD", i, "col", j))
assign(paste0("CD", i, "col", j, "SObj"), SObject_temp)
rm(bm_rawdat_temp, SObject_temp)
}
}
# Get rid of very large geneinfo from workspace
rm(geneinfo)
library(stringr)
library(Seurat)
library(gtools)
geneinfo <- readRDS("./rds_objects/geneinfo.rds")
for (i in 1:3) {
for (j in 1:6) {
# read in every raw data matrix
raw_dat_temp <- read.table(rawdata[6 * (i - 1) + j], header = T, stringsAsFactors = F,
row.names = 1)
# remove the version numbers from those gene IDs
gene_id_temp <- str_replace(rownames(raw_dat_temp), pattern = ".[0-9]+$",
replacement = "")
# and subset to only those genes from the full list of genes
mygeneinfo_temp <- geneinfo[geneinfo$ensembl_gene_id %in% gene_id_temp, ]
# make a temporary raw data matrix with the non-version gene IDs
bm_rawdat_temp <- raw_dat_temp
rownames(bm_rawdat_temp) <- gene_id_temp
rm(gene_id_temp, raw_dat_temp)
# subset temp raw data matrix to only the ones with info on biomart
bm_rawdat_temp <- bm_rawdat_temp[rownames(bm_rawdat_temp) %in% mygeneinfo_temp$ensembl_gene_id,
]
# get all the index numbers for a gene list sorted by number
mygeneinfo_idsort_temp <- order(mygeneinfo_temp$ensembl_gene_id, decreasing = F)
# and sort the genes with those index numbers
mygeneinfo_sort_temp <- mygeneinfo_temp[mygeneinfo_idsort_temp, ]
rm(mygeneinfo_temp, mygeneinfo_idsort_temp)
# get rid of duplicate ensembl IDs
mygeneinfo_s_uni_temp <- mygeneinfo_sort_temp[order(mygeneinfo_sort_temp$ensembl_gene_id)[!duplicated(mygeneinfo_sort_temp$ensembl_gene_id)],
]
rm(mygeneinfo_sort_temp)
# deal with duplicate gene name/symbols (mostly ''s) by identifying the
# duplicates and then creating a new gene name for them that is
# genesymbol.ensemblID
dupl_temp <- unique(mygeneinfo_s_uni_temp$hgnc_symbol[duplicated(mygeneinfo_s_uni_temp$hgnc_symbol)])
for (k in dupl_temp) {
rows_temp <- which(mygeneinfo_s_uni_temp$hgnc_symbol == k)
for (m in 1:length(rows_temp)) {
mygeneinfo_s_uni_temp$hgnc_symbol[rows_temp[m]] <- paste(mygeneinfo_s_uni_temp$hgnc_symbol[rows_temp[m]],
".", mygeneinfo_s_uni_temp$ensembl_gene_id[rows_temp[m]], sep = "")
}
}
# add those new gene names/symbols as rownames in the raw data matrix
rownames(bm_rawdat_temp) <- mygeneinfo_s_uni_temp$hgnc_symbol
rm(mygeneinfo_s_uni_temp)
SObject_temp <- CreateSeuratObject(bm_rawdat_temp, min.cells = min_cells_per_gene,
min.features = min_genes_per_cell, project = paste0("CD", i, "col", j))
assign(paste0("CD", i, "col", j, "SObj"), SObject_temp)
rm(bm_rawdat_temp, SObject_temp)
}
}
# Get rid of very large geneinfo from workspace
rm(geneinfo)
for (i in 1:3) {
for (j in 1:6) {
SObject <- eval(as.name(paste0("CD", i, "col", j, "SObj")))
demux_temp <- read.table(paste0("/project2/gilad/reem/singlecellCM/round1/fulldata/CD",
i, "/CD", i, "col", j, "/demux/hpCD", i, "col", j, "_demux.best"), header = T,
stringsAsFactors = F)
m <- match(rownames(SObject@meta.data), demux_temp$BARCODE)
if (any(is.na(m)))
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
i, "col", j, "!\n"))
demux_temp <- demux_temp[m, ]
demux_temp$individual <- "doublet"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA19093")] <- "NA19093"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18912")] <- "NA18912"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18858")] <- "NA18858"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18520")] <- "NA18520"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18511")] <- "NA18511"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18508")] <- "NA18508"
tmp_ind <- demux_temp$individual
names(tmp_ind) <- demux_temp$BARCODE
}
}
rownames(SObject@meta.data)
length(rownames(SObject@meta.data))
length(demux_temp$BARCODE)
for (i in 1:3) {print(i)}
arr <- c()
for (i in 1:3) {arr <- c(arr, i)}
arr
for (i in 1:3) {
for (j in 1:6) {
SObject <- eval(as.name(paste0("CD", i, "col", j, "SObj")))
demux_temp <- read.table(paste0("/project2/gilad/reem/singlecellCM/round1/fulldata/CD",
i, "/CD", i, "col", j, "/demux/hpCD", i, "col", j, "_demux.best"), header = T,
stringsAsFactors = F)
m <- match(rownames(SObject@meta.data), demux_temp$BARCODE)
if (any(is.na(m)))
print(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
i, "col", j, "!\n"))
demux_temp <- demux_temp[m, ]
demux_temp$individual <- "doublet"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA19093")] <- "NA19093"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18912")] <- "NA18912"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18858")] <- "NA18858"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18520")] <- "NA18520"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18511")] <- "NA18511"
demux_temp$individual[which(demux_temp$BEST == "SNG-NA18508")] <- "NA18508"
tmp_ind <- demux_temp$individual
names(tmp_ind) <- demux_temp$BARCODE
}
}
CD1col1SObj
CD1col2SObj
CD1col3SObj
CD1col4SObj
CD1col5SObj
CD1col6SObj
CD2col6SObj
CD2col1SObj
CD2col2SObj
CD2col3SObj
CD2col4SObj
CD2col5SObj
CD2col6SObj
CD3col1SObj
library(monocle3)
rawdata <- '/project2/gilad/reem/singlecellCM/round1/fulldata/CD1/CD1col1/output/dge_data/YG-RE-RE1-hpCD1col1_S1_gene_counts.tsv.gz'
min_cells_per_gene = 3  # minimum num cells in which a gene must appear
min_genes_per_cell = 200  # minimum num genes for a cell to be included
cutoff_mito = FALSE  # wanna cut off cells w a certain percent mito? (bool)
mito_threshold = 30  # what is the threshold for mito cutoff?
expression_matrix <- read.table(rawdata, header = T, stringsAsFactors = F, row.names = 1)
# remove the version numbers from those gene IDs
non_version_genes <- str_replace(rownames(expression_matrix), pattern = ".[0-9]+$", replacement = "")
library(stringr)
# remove the version numbers from those gene IDs
non_version_genes <- str_replace(rownames(expression_matrix), pattern = ".[0-9]+$", replacement = "")
rownames(expression_matrix) <- non_version_genes
# subset to only those genes from the full list of genes
geneinfo <- readRDS("./rds_objects/geneinfo.rds")
genes_present <- geneinfo[geneinfo$ensembl_gene_id %in% non_version_genes, ]
expression_matrix <- expression_matrix[rownames(expression_matrix) %in% geneinfo$ensembl_gene_id]
rm(non_version_genes)
# sort by ensemblID
id_sort <- order(genes_present$ensembl_gene_id, decreasing=F)
genes_present <- genes_present[id_sort, ]
expression_matrix <- expression_matrix[, id_sort]
rm(id_sort)
expression_matrix <- read.table(rawdata, header = T, stringsAsFactors = F, row.names = 1)
# remove the version numbers from those gene IDs
non_version_genes <- str_replace(rownames(expression_matrix), pattern = ".[0-9]+$", replacement = "")
rownames(expression_matrix) <- non_version_genes
# subset to only those genes from the full list of genes
geneinfo <- readRDS("./rds_objects/geneinfo.rds")
genes_present <- geneinfo[geneinfo$ensembl_gene_id %in% non_version_genes, ]
expression_matrix <- expression_matrix[rownames(expression_matrix) %in% geneinfo$ensembl_gene_id]
rm(non_version_genes)
id_sort <- order(genes_present$ensembl_gene_id, decreasing=F)
View(genes_present)
genes_present <- genes_present[id_sort, ]
View(expression_matrix)
expression_matrix <- expression_matrix[!duplicated(rownames(expression_matrix)), ]
rownames(expression_matrix[!duplicated(rownames(expression_matrix))])
rownames(expression_matrix[duplicated(rownames(expression_matrix))])
rownames(expression_matrix[duplicated(rownames(expression_matrix))])
View(expression_matrix)
sum(duplicated(rownames(expression_matrix)))
rownames(expression_matrix)
expression_matrix <- read.table(rawdata, header = T, stringsAsFactors = F, row.names = 1)
# remove the version numbers from those gene IDs
non_version_genes <- str_replace(rownames(expression_matrix), pattern = ".[0-9]+$", replacement = "")
rownames(expression_matrix) <- non_version_genes
# subset to only those genes from the full list of genes
geneinfo <- readRDS("./rds_objects/geneinfo.rds")
genes_present <- geneinfo[geneinfo$ensembl_gene_id %in% non_version_genes, ]
expression_matrix <- expression_matrix[rownames(expression_matrix) %in% geneinfo$ensembl_gene_id]
rm(non_version_genes)
head(rownames(expression_matrix))
sum(duplicated(rownames(expression_matrix)))
sum(rownames(expression_matrix) %in% geneinfo$ensembl_gene_id)
expression_matrix <- expression_matrix[rownames(expression_matrix) %in% geneinfo$ensembl_gene_id, ]
subset(rownames(genes_present), !(rownames(genes_present) %in% rownames(expression_matrix)))
subset(genes_present$ensembl_gene_id, !(genes_present$ensembl_gene_id %in% rownames(expression_matrix)))
sum(duplicated(genes_present$ensembl_gene_id))
genes_present <- genes_present[!duplicated(genes_present$ensembl_gene_id)]
genes_present <- genes_present[!duplicated(genes_present$ensembl_gene_id), ]
rm(non_version_genes)
# sort by ensemblID
id_sort <- order(genes_present$ensembl_gene_id, decreasing=F)
genes_present <- genes_present[id_sort, ]
expression_matrix <- expression_matrix[!duplicated(rownames(expression_matrix)),]
duplicates <- unique(genes_present$hgnc_symbol[duplicated(genes_present$hgnc_symbol)])
for (g in duplicates) {
copies_of_g <- which(genes_present$hgnc_symbol == g)
if (g == "") {
for (m in 1:length(copies_of_g)) {
genes_present$hgnc_symbol[copies_of_g[m]] <- paste0("unnamed.", genes_present$ensembl_gene_id[copies_of_g[m]])
}
} else {
for (m in 1:length(copies_of_g)) {
genes_present$hgnc_symbol[copies_of_g[m]] <- paste0(g, ".", genes_present$ensembl_gene_id[copies_of_g[m]])
}
}
}
rm(duplicates, copies_of_g, g, m)
genes_matrix <- data.frame(genes_present$hgnc_symbol)
rownames(genes_matrix) <- genes_present$ensembl_gene_id
colnames(genes_matrix) <- "gene_short_name"
View(genes_matrix)
save.image(file="playing_with_cds_construction.RData")
demux <- read.table(paste0("hpCD1col1_demux.best"))
demux <- read.table(paste0("/project2/gilad/reem/singlecellCM/round1/fulldata/CD", "1", "col", 1, "_demux.best"))
demux <- read.table(paste0("/project2/gilad/reem/singlecellCM/round1/fulldata/CD", "1", "col", "1", "_demux.best"))
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/CD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/hpCD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/CD', '1', '/CD', '1', 'col', '1', '/hpCD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/CD', '1', '/CD', '1', 'col', '1', '/demux/hpCD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
m <- match(colnames(expression_matrix), demux$BARCODE)
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
i, "col", j, "!\n"))
}
m <- match(colnames(expression_matrix), demux$BARCODE)
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
'1', "col", '1', "!\n"))
}
colnames(expression_matrix)
demux$BARCODE
View(demux)
m <- match(colnames(expression_matrix), demux$rownames)
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
'1', "col", '1', "!\n"))
}
m <- match(colnames(expression_matrix), rownames(demux))
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
'1', "col", '1', "!\n"))
}
sum(is.na(m))
View(expression_matrix)
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/CD', '1', '/CD', '1', 'col', '1', '/demux/hpCD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
m <- match(colnames(expression_matrix), rownames(demux))
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
'1', "col", '1', "!\n"))
}
gene_counts <- sum(expression_matrix[,:])
gene_counts <- colSums(expression_matrix)
gene_counts <- colSums(expression_matrix)
expression_matrix <- expression_matrix[,gene_counts>=200]
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/CD', '1', '/CD', '1', 'col', '1', '/demux/hpCD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
m <- match(colnames(expression_matrix), rownames(demux))
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
'1', "col", '1', "!\n"))
}
sum(is.na(m))
m[is.na(m)]
is.na(m)
gene_counts <- colSums(expression_matrix)
expression_matrix <- expression_matrix[,gene_counts>200]
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/CD', '1', '/CD', '1', 'col', '1', '/demux/hpCD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
m <- match(colnames(expression_matrix), rownames(demux))
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
'1', "col", '1', "!\n"))
}
sum(is.na(m))
cell_counts <- rowSums(expression_matrix)
expression_matrix <- expression_matrix[cell_counts >= 3,]
gene_counts <- colSums(expression_matrix)
expression_matrix <- expression_matrix[,gene_counts>=200]
demux_file <- paste0('/project2/gilad/reem/singlecellCM/round1/fulldata/CD', '1', '/CD', '1', 'col', '1', '/demux/hpCD', '1', 'col', '1', '_demux.best')
demux <- read.table(demux_file, header = T, stringsAsFactors = F, row.names = 1)
m <- match(colnames(expression_matrix), rownames(demux))
if (any(is.na(m))) {
cat(paste0("Not all barcodes are in demuxlet data. Something is wrong in CD",
'1', "col", '1', "!\n"))
}
sum(is.na(m))
match(T, is.na(m))
gene_counts[10359]
demux[10359,]
demux[,10359]
match("CGATGCACTCCA", rownames(demux))
cell_counts <- rowSums(expression_matrix)
expression_matrix <- expression_matrix[cell_counts >= min_cells_per_gene,]
gene_counts <- colSums(expression_matrix)
expression_matrix <- expression_matrix[,gene_counts>=min_genes_per_cell]
rm(c(cell_counts, gene_counts))
rm(cell_counts, gene_counts)
demux <- demux[m,]
demux_temp$individual <- "doublet"
demux$individual <- "doublet"
demux$individual[which(demux_temp$BEST == "SNG-NA19093")] <- "NA19093"
demux$individual <- "doublet"
demux$individual[which(demux$BEST == "SNG-NA19093")] <- "NA19093"
demux$individual[which(demux$BEST == "SNG-NA18912")] <- "NA18912"
demux$individual[which(demux$BEST == "SNG-NA18858")] <- "NA18858"
demux$individual[which(demux$BEST == "SNG-NA18520")] <- "NA18520"
demux$individual[which(demux$BEST == "SNG-NA18511")] <- "NA18511"
demux$individual[which(demux$BEST == "SNG-NA18508")] <- "NA18508"
save.image(file="playing_with_cds_construction.RData")
setwd("~/single-cell-development")
